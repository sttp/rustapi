var searchIndex = JSON.parse('{\
"sttp":{"doc":"Rust API for the Streaming Telemetry Transport Protocol (…","t":[3,3,3,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,0,11,11,12,12,11,11,11,12,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,0,11,11,11,11,11,11,11,11,11,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Config","Settings","Subscriber","auto_reconnect","auto_request_metadata","auto_subscribe","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compress_metadata","compress_payload_data","compress_signal_index_cache","constraint_parameters","data","default","default","enable_time_reasonability_check","extra_connection_string_parameters","from","from","from","include_time","into","into","into","lag_time","lead_time","max_retries","max_retry_interval","metadata_filters","processing_interval","publish_interval","request_nan_value_filter","retry_interval","rfc_guid_encoding","start_time","stop_time","throttled","to_owned","to_owned","transport","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","udp_port","use_local_clock_as_real_time","use_millisecond_resolution","version","SignalIndexCache","borrow","borrow_mut","contains","count","decode","from","id","into","new","record","signal_id","signal_ids","signal_index","source","try_from","try_into","type_id"],"q":["sttp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sttp::transport","","","","","","","","","","","","","","","","",""],"d":["Defines STTP connection related configuration parameters.","Defines STTP subscription related settings.","Represents an STTP data subscriber.","Defines flag that determines if connections should be …","Defines the flag that determines if metadata should be …","Defines the flag that determines if subscription should be …","","","","","","","","","","","Determines whether the metadata transfer is compressed.","Determines whether payload data is compressed.","Determines whether the signal index cache is compressed.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Determines if time should be included in non-compressed, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Defines the maximum number of times to retry a connection. …","Defines the maximum retry interval, in milliseconds. Note: …","Defines any filters to be applied to incoming metadata to …","","Defines the down-sampling publish interval, in seconds, to …","","Defines the base retry interval, in milliseconds. Retries …","Determines if Guid wire serialization should use RFC …","","","Determines if data will be published using down-sampling.","","","","","","","","","","","","","Defines the desired UDP port to use for publication. Zero …","","","Defines the target STTP protocol version. This currently …","Represents a mapping of 32-bit runtime IDs to 128-bit …","","","Determines if the specified signalindex exists with the …","Gets the number of <code>Measurement</code> records that can be found …","Parses a <code>SignalIndexCache</code> from the specified byte buffer …","Returns the argument unchanged.","Returns the <code>Measurement</code> integer ID for the specified …","Calls <code>U::from(self)</code>.","Creates a new, empty <code>SignalIndexCache</code>.","Record returns the key <code>Measurement</code> values, signal ID Guid, …","Returns the signal ID Guid for the specified signalindex …","Gets a set for all the Guid values found in the …","Returns the signal index for the specified signal ID Guid …","Returns the <code>Measurement</code> source string for the specified …","","",""],"i":[0,0,0,1,1,1,15,1,2,15,1,2,1,2,1,2,1,1,1,2,0,1,2,2,2,15,1,2,2,15,1,2,2,2,1,1,1,2,2,2,1,1,2,2,2,1,2,0,15,1,2,15,1,2,15,1,2,2,2,2,1,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],0,0,0,0,0,[[],1],[[],2],0,0,[[]],[[]],[[]],0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],0,0,0,0,0,[[]],[[]],[[5,6],7],[5,8],[5,[[3,[9,[11,[10]]]]]],[[]],[[5,6],12],[[]],[[],5],[[5,6]],[[5,6],9],[5,[[13,[9]]]],[[5,9],6],[[5,6],14],[[],3],[[],3],[[],4]],"p":[[3,"Config"],[3,"Settings"],[4,"Result"],[3,"TypeId"],[3,"SignalIndexCache"],[15,"i32"],[15,"bool"],[15,"u32"],[3,"Uuid"],[8,"Error"],[3,"Box"],[15,"u64"],[3,"HashSet"],[15,"str"],[3,"Subscriber"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
